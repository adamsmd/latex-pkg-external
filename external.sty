% TODO: this is my first package
%
% (c) Michael D. Adams <https://michaeldadams.org>
%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{external}[2019/01/05 v0.1.0 Externally Rendered LaTeX]

\RequirePackage{graphicx}
\RequirePackage{keyval}
\RequirePackage{kvoptions}
\RequirePackage{suffix}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Options
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newlength{\external@top}
\newlength{\external@bottom}
\newlength{\external@left}
\newlength{\external@right}

% Default values for options
\setlength{\external@top}{1in}
\setlength{\external@bottom}{1in}
\setlength{\external@left}{1in}
\setlength{\external@right}{1in}

\define@key{external}{top}{\setlength{\external@top}{#1}}
\define@key{external}{bottom}{\setlength{\external@bottom}{#1}}
\define@key{external}{left}{\setlength{\external@left}{#1}}
\define@key{external}{right}{\setlength{\external@right}{#1}}

\ProcessKeyvalOptions*

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Globals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Values set while reading a dimension file
\newlength{\external@TOP}
\newlength{\external@BOTTOM}
\newlength{\external@LEFT}
\newlength{\external@RIGHT}
\newlength{\external@WIDTH}
\newlength{\external@HEIGHT}
\newlength{\external@DEPTH}

% Stream that `\externalWrite` writes to
\newwrite\external@file

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% TODO: document that arguments may need to use ##1 instead of #1

% TODO: options for extentions (e.g., .dim, .tex, .pdf)
% TODO: options for debugging
% TODO: options for class (e.g., article) (pagestyle?)
% TODO: options for math
% TODO: options for display math
% TODO: allow user code to change \baselinestretch

% TODO: check and error if files not exist
% TODO: argument to specify margins
% NOTE: If you want to include display math in `\external` use the incantation: \[ \external{$\displaystyle ...$} \]

% ARGS: file preamble body
\newcommand{\externalCode}[3]{%
  \unexpanded{% NB: we stop and restart `\unexpand` at `#1`
    \documentclass{article}
    % Note that since the user code supplied in #2 or #3 might assume
    % `@` is `other` we avoid calling `\makeatletter` until after the
    % user code is used.
    %
    % Also, the use of `\unexpanded` might have changed any `#1` that
    % occur in `#2` or `#3` to `##1`, so we indirect through a `\def`.
    %
    % Finally, we use `\scantokens` in case the use code needs to play
    % with the catcodes.  The `\relax` at the end ensures that
    % `\scantokens` does not insert an extra space at the end.
    % See https://tex.stackexchange.com/questions/117906/use-of-everyeof-and-endlinechar-with-scantokens

    % Run the user specified preamble
    \expandafter\def\csname external@preamble\endcsname{#2}
    \csname external@preamble\endcsname

    \begin{document}

    % Save the symbols into the box \external@box
    \expandafter\def\csname external@body\endcsname{#3}
    \expandafter\newsavebox\csname external@box\endcsname
    \expandafter\savebox\csname external@box\endcsname{\csname external@body\endcsname}

    \makeatletter

    % For the sake of debugging, print the dimentions of the symbol in \external@box
    \typeout{*** width=\the\wd\external@box, height=\the\ht\external@box, depth=\the\dp\external@box}

    % Save the dimentions of the symbol in \external@box
    \newwrite\external@dimfile
    \immediate\openout\external@dimfile=#1.dim
    % TODO: save margins
    % We have no guarantee that the `.dim` file will be read when `@` is a letter so we use `\csname`
    \immediate\write\external@dimfile{\noexpand\setlength{\noexpand\csname external@TOP\endcsname}{1in}\relax}
    \immediate\write\external@dimfile{\noexpand\setlength{\noexpand\csname external@BOTTOM\endcsname}{1in}\relax}
    \immediate\write\external@dimfile{\noexpand\setlength{\noexpand\csname external@LEFT\endcsname}{1in}\relax}
    \immediate\write\external@dimfile{\noexpand\setlength{\noexpand\csname external@RIGHT\endcsname}{1in}\relax}
    \immediate\write\external@dimfile{\noexpand\setlength{\noexpand\csname external@WIDTH\endcsname}{\the\wd\external@box}\relax}
    \immediate\write\external@dimfile{\noexpand\setlength{\noexpand\csname external@HEIGHT\endcsname}{\the\ht\external@box}\relax}
    \immediate\write\external@dimfile{\noexpand\setlength{\noexpand\csname external@DEPTH\endcsname}{\the\dp\external@box}\relax}
    \immediate\closeout\external@dimfile

    % Set the text area to perfectly fit the symbol stored in \external@box,
    % and set the page to have a one inch margin around the symbol.

    \pagestyle{empty}

    \setlength{\parindent}{0pt}
    \setlength{\parskip}{0pt}
    \renewcommand{\baselinestretch}{1.0}

    \topmargin=0pt
    \headheight=0pt
    \headsep=0pt
    \marginparsep=0pt
    \marginparwidth=0pt
    \footskip=0pt
    \marginparpush=0pt
    \oddsidemargin=0pt
    \evensidemargin=0pt
    \topskip=0pt

    % We keep a one inch margin (that we then trim)
    % to allow symbols to draw outsize their box
    \hoffset=0pt % NOTE: includes +1in offset
    \voffset=0pt % NOTE: includes +1in offset
    \ifdefined\pdfpagewidth
    \pdfpagewidth=\dimexpr\wd\external@box+2in
    \pdfpageheight=\dimexpr\ht\external@box+\dp\external@box+2in
    \else
    \pagewidth=\dimexpr\wd\external@box+2in
    \pageheight=\dimexpr\ht\external@box+\dp\external@box+2in
    \fi
    \paperwidth=\dimexpr\wd\external@box+2in
    \paperheight=\dimexpr\ht\external@box+\dp\external@box+2in

    \textwidth=\wd\external@box               % TODO: alignment problem
    \textheight=\dimexpr\ht\external@box+\dp\external@box
    \hsize=\wd\external@box                   % Paragraph width
    \vsize=\dimexpr\ht\external@box+\dp\external@box % Column height

    % Finally, render the \external@box
    \usebox{\external@box}

    \end{document}
  }}

% ARGS: filename preamble body
\newcommand{\externalWrite}[3]{%
  \typeout{Writing to external: \unexpanded{#1}}%
  % Write to file
  \immediate\openout\external@file=#1.tex%
  \immediate\write\external@file{\externalCode{#1}{#2}{#3}}%
  \immediate\closeout\external@file
}

% TODO: run options (e.g., -shell-escape)
\newcommand{\externalRun}[1]{%
  % Compile file
  \immediate\typeout{Running external: #1.tex}%
  \immediate\write18{pdflatex -shell-escape -halt-on-error -interaction=batchmode #1.tex}%
  % TODO: check for errors
}

% TODO: includegraphics options
\newcommand{\externalRead}[1]{%
  % Load the dimentions of the symbol
  \input{#1.dim}%
  % Use \raisebox to model the symbol's depth
  \raisebox{-\external@DEPTH}{%
    % Due to trouble with including a space after a command, we cannot use:
    %   \includegraphics[trim=\the\external@left \the\external@bottom \the\external@right \the\external@top]{#1.pdf}
    % So, instead we indirect through another command
    \external@includegraphics{\the\external@LEFT}{\the\external@BOTTOM}{\the\external@RIGHT}{\the\external@TOP}{#1.pdf}}%
}

\newcommand{\external@includegraphics}[5]{\includegraphics[trim=#1 #2 #3 #4]{#5}}

\newcommand{\external}[4][]{\externalWrite{#2}{#3}{#4}\externalRun{#2}\externalRead{#2}}

% ARGS: name preamble
\newcommand{\newexternal}[2]{
  % ARGS: file code
  \newcommand{#1}[2]{\external{##1}{#2}{##2}}}

% ARGS: name action fileNameCmd preamble
\WithSuffix\newcommand{\newexternal}*[4]{%
  % ARGS: code
  \newcommand{#1}[1]{%
    #2%
    \edef\external@filename{{#3}}%
    \expandafter\external\external@filename{#4}{##1}}}

% Example:
% \newcounter[\tableNum]{\noteNum}
% \newexternal{\eAMS}{\externalFile}{\usepackage{ams}}
% \eAMS{...}

\endinput
%%
%% End of file `external.sty'.
